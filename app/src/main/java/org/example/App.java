// /*
//  * This source file was generated by the Gradle 'init' task
//  */
// package org.example;
// //import activeMQ dependencies
// import javax.jms.*;

// import org.apache.activemq.AMQConnectionFactory;
// public class App {
//     public static void main(String[] args) {
// //How to open a connection
// //May be i need to open a connection factory
// String activeUrl = "tcp://localhost:61616";
// //initialize a queue connection factory object
//         AMQConnectionFactory connectionFactory = new AMQConnectionFactory(activeUrl);
//         Connection conn = connectionFactory.createconnection();
//         //Starting connection
//         conn.start();
// //Create Session and create queue
// Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);

// //ActiveMq creates queue automatically, if there is a session oresent it wont create again

// //Build message,create message or convert message

// //Send a message to activeMQ

// //clean up(close session)
//     }
// }

// package org.example;

// import javax.jms.*; // Import all necessary JMS classes
// import org.apache.activemq.ActiveMQConnectionFactory; // Correct class name for ActiveMQ

// public class App {
//     public static void main(String[] args) {
//         // Define the ActiveMQ broker URL
//         String activeUrl = "tcp://localhost:61616";

//         Connection connection = null; // Initialize connection to null for finally block
//         Session session = null;       // Initialize session to null for finally block

//         try {
//             // 1. Create a ConnectionFactory
//             // Use the correct class name: ActiveMQConnectionFactory
//             ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(activeUrl);

//             // 2. Create a Connection
//             // Use the correct method name: createConnection()
//             connection = connectionFactory.createConnection();

//             // 3. Start the Connection
//             connection.start();
//             System.out.println("JMS Connection started successfully.");

//             // 4. Create a Session
//             // Arguments: transacted (false for non-transacted), acknowledgeMode (AUTO_ACKNOWLEDGE)
//             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
//             System.out.println("JMS Session created successfully.");

//             // At this point, you would typically create a Destination (Queue or Topic)
//             // and then a MessageProducer or MessageConsumer.
//             // Example:
//             // Destination destination = session.createQueue("myQueue");
//             // MessageProducer producer = session.createProducer(destination);
//             // TextMessage message = session.createTextMessage("Hello ActiveMQ!");
//             // producer.send(message);
//             // System.out.println("Sent message: " + message.getText());

//         } catch (JMSException e) {
//             // 5. Handle JMS Exceptions
//             System.err.println("A JMS error occurred: " + e.getMessage());
//             e.printStackTrace();
//         } catch (Exception e) {
//             // Catch any other unexpected exceptions
//             System.err.println("An unexpected error occurred: " + e.getMessage());
//             e.printStackTrace();
//         } finally {
//             // 6. Close resources in a finally block to ensure they are released
//             if (session != null) {
//                 try {
//                     session.close();
//                     System.out.println("JMS Session closed.");
//                 } catch (JMSException e) {
//                     System.err.println("Error closing session: " + e.getMessage());
//                 }
//             }
//             if (connection != null) {
//                 try {
//                     connection.close();
//                     System.out.println("JMS Connection closed.");
//                 } catch (JMSException e) {
//                     System.err.println("Error closing connection: " + e.getMessage());
//                 }
//             }
//         }
//     }
// }
package org.example;

import javax.jms.*; // Import all necessary JMS classes
import org.apache.activemq.ActiveMQConnectionFactory; // Correct class name for ActiveMQ

public class App {
    public static void main(String[] args) {
        // Define the ActiveMQ broker URL
        String activeUrl = "tcp://localhost:61616";
        String queueName = "myTestQueue"; // Define the queue name

       Connection connection = null; // Initialize connection to null for finally block
        Session session = null;       // Initialize session to null for finally block

        try {
            // 1. Create a ConnectionFactory
            // Use the correct class name: ActiveMQConnectionFactory
            ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(activeUrl);

            // 2. Create a Connection
            // Use the correct method name: createConnection()
            //connection = connectionFactory.createConnection();
             connection = connectionFactory.createConnection();

            // 3. Start the Connection
            connection.start();
            System.out.println("JMS Connection started successfully.");

            // 4. Create a Session
            // Arguments: transacted (false for non-transacted), acknowledgeMode (AUTO_ACKNOWLEDGE)
            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
            System.out.println("JMS Session created successfully.");

            // 5. Create a Destination (Queue in this case)
            Destination destination = session.createQueue(queueName);
            System.out.println("JMS Queue '" + queueName + "' created/found.");

            // 6. Create a MessageProducer
            MessageProducer producer = session.createProducer(destination);
            System.out.println("JMS MessageProducer created.");

            // 7. Create a TextMessage
            String messageText = "Hello from ActiveMQ!";
            TextMessage message = session.createTextMessage(messageText);
            System.out.println("JMS TextMessage created: '" + messageText + "'");

            // 8. Send the message
            producer.send(message);
            System.out.println("Message sent successfully to queue: '" + queueName + "'");

        } catch (JMSException e) {
            // 9. Handle JMS Exceptions
            System.err.println("A JMS error occurred: " + e.getMessage());
            e.printStackTrace();
        } catch (Exception e) {
            // Catch any other unexpected exceptions
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace();
        } finally {
            // 10. Close resources in a finally block to ensure they are released
            if (session != null) {
                try {
                    session.close();
                    System.out.println("JMS Session closed.");
                } catch (JMSException e) {
                    System.err.println("Error closing session: " + e.getMessage());
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                    System.out.println("JMS Connection closed.");
                } catch (JMSException e) {
                    System.err.println("Error closing connection: " + e.getMessage());
                }
            }
        }
    }
}
